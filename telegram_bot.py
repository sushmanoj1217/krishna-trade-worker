# telegram_bot.py  ‚Äî handlers-only (no auto start)
from __future__ import annotations
import os
import logging
from telegram.ext import ApplicationBuilder, CommandHandler

# /oc_now handler register import
try:
    from skills.examples.oc_now import register as register_oc_now
except Exception:
    register_oc_now = None

BOT_TOKEN_ENV = "TELEGRAM_BOT_TOKEN"
_log = logging.getLogger(__name__)

def build_application():
    token = os.environ.get(BOT_TOKEN_ENV)
    if not token:
        raise RuntimeError(f"{BOT_TOKEN_ENV} not set")
    app = ApplicationBuilder().token(token).build()
    register_handlers(app)
    return app

def register_handlers(app):
    async def ping(update, context):
        await update.message.reply_text("pong")
    app.add_handler(CommandHandler("ping", ping))

    # üëá ‡§Ø‡§π‡•Ä‡§Ç ‚Äú‡§µ‡•ã ‡§è‡§ï ‡§≤‡§æ‡§á‡§®‚Äù ‡§ï‡§æ ‡§Ö‡§∏‡§≤‡•Ä ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ ‡§π‡•à
    if register_oc_now:
        register_oc_now(app)
        _log.info("/oc_now handler registered")
    else:
        _log.warning("skills.examples.oc_now not available; /oc_now not registered")

# ‡§Ø‡§π‡§æ‡§Ç ‡§∏‡•á polling **start ‡§®‡§π‡•Ä‡§Ç** ‡§ï‡§∞‡§§‡•á ‚Äî krishna_main.py ‡§∏‡•á ‡§π‡•Ä ‡§π‡•ã‡§ó‡§æ
if __name__ == "__main__":
    print("handlers-only module; start polling from krishna_main.py")
